---
description:
globs:
alwaysApply: true
---
# Secrets Management Best Practices

## Overview

Guidelines for securely handling sensitive information such as API keys, database passwords, encryption keys, and other credentials (collectively referred to as "secrets").

## NEVER Hardcode Secrets

### Principle
- **Never commit secrets directly into source code repositories (e.g., Git).** This is the most critical rule.
- Secrets in code become easily accessible to anyone with repository access and persist in commit history even if removed later.

## Secure Storage Mechanisms

### 1. Environment Variables

- **Use:** Common for injecting secrets into applications, especially in containerized environments.
- **Pros:** Simple, widely supported, separates secrets from code.
- **Cons:** Can be exposed via process listing (`ps`), potentially logged, might require secure injection mechanism into the environment.
- **Best Practice:** Load environment variables from secure sources; avoid storing them directly in insecure configuration files.

### 2. Configuration Files (Handled Securely)

- **Use:** Storing configuration, including secrets, in files separate from the codebase.
- **Pros:** Centralized configuration.
- **Cons:** Requires strict access control on the files, risk of accidental commits if not properly `.gitignore`'d, needs secure deployment/management.
- **Best Practice:** Encrypt sensitive values within configuration files (e.g., using Ansible Vault, git-crypt) or load secrets from a dedicated secrets manager.

### 3. Dedicated Secrets Management Tools

- **Use:** Tools specifically designed for storing, managing, auditing, and rotating secrets.
- **Pros:** Centralized management, access control, audit trails, rotation capabilities, often integrates with CI/CD and infrastructure.
- **Cons:** Introduces another system to manage, potential single point of failure if not highly available.
- **Examples:**
    - HashiCorp Vault
    - AWS Secrets Manager
    - Azure Key Vault
    - Google Cloud Secret Manager
    - Kubernetes Secrets (requires careful management and potentially additional layers like Sealed Secrets or external secrets operators)

## Access Control

### Principle
- Apply the Principle of Least Privilege to secrets access.
- Only grant access to secrets to the specific applications, services, or users that absolutely require them.
- Use fine-grained permissions if the secrets management tool supports it.

## Rotation

### Principle
- Regularly rotate secrets (change their values) to limit the window of opportunity if a secret is compromised.
- Automate rotation where possible.

### Practices
- **Define Rotation Policies:** Establish how often different types of secrets should be rotated (e.g., database passwords every 90 days, API keys annually).
- **Automate Rotation:** Use secrets management tools or scripts to automate the rotation process, including updating the applications that use the secrets.
- **Support Graceful Rotation:** Applications should be designed to handle key rotation without downtime (e.g., by temporarily accepting both old and new secrets during a transition period).

## Auditing

### Principle
- Log all access to secrets (who/what accessed which secret and when).
- Regularly review audit logs for suspicious activity.

### Implementation
- Leverage the auditing features of dedicated secrets management tools.
- Ensure logs are stored securely and retained appropriately.

## Secrets in CI/CD

### Principle
- Securely inject secrets into build and deployment pipelines only when needed.
- Avoid exposing secrets in build logs.

### Techniques
- **Use CI/CD Platform Secrets Management:** Most platforms (GitHub Actions, GitLab CI, Jenkins) have built-in mechanisms for storing secrets.
- **Integrate with Secrets Managers:** Fetch secrets dynamically from tools like Vault during pipeline execution.
- **Mask Secrets in Logs:** Ensure the CI/CD platform automatically masks secret values in log output.

## Development Environment

### Principle
- Avoid using production secrets in development environments.
- Use separate, non-production secrets for development and testing.

### Practices
- **Local Secrets Files:** Use local, `.gitignore`'d files (e.g., `.env`) to store developer-specific secrets.
- **Development Secrets Manager:** Use a non-production instance or path within a secrets manager for development credentials.